import { useEffect, useState } from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { BSON } from 'realm-web';
import useRealmStore, { userTypes } from '../../hooks/useRealmStore';
import { NoteForVisitor } from '../../components/NotePage/NoteForVisitor/NoteForVisitor';
import { NoteForAdmin } from '../../components/NotePage/NoteForAdmin/NoteForAdmin';
import useNoteStore from '../../hooks/useNoteStore';

const { ObjectId } = BSON;

const statusTypes = {
	success: 'success',
	error: 'error',
	loading: 'loading',
};

export default function NotePage() {
	const router = useRouter();
	let { noteId, title, content, tags: noteTags, isPublic } = router.query;

	if (isPublic === 'true') {
		isPublic = true;
	} else if (isPublic === 'false') {
		isPublic = false;
	}

	if (typeof noteTags === 'string') {
		noteTags = [noteTags];
	}

	const setValues = useNoteStore((state) => state.setValues);

	const userType = useRealmStore((state) => state.userType);
	const db = useRealmStore((state) => state.db);

	const [status, setStatus] = useState(statusTypes.loading);

	useEffect(() => {
		console.log('tags from query: ', noteTags);
	}, []);

	useEffect(() => {
		(async () => {
			if (db && !title && !content) {
				try {
					const {
						title,
						content,
						tags: noteTags,
						isPublic,
					} = await db.collection('notes').findOne({ _id: ObjectId(noteId) });
					console.log('tags from mongodb: ', noteTags);
					setValues({ title, content, noteTags, isPublic });
					setStatus(statusTypes.success);
				} catch (err) {
					console.warn(err);
					setStatus(statusTypes.error);
				}
			} else {
				setValues({ title, content, noteTags, isPublic });
				setStatus(statusTypes.success);
			}
		})();
	}, [db, router.query]);

	return (
		<>
			<Head>
				<title>{title}</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			{status === statusTypes.success ? (
				<>
					{userType === userTypes.admin ? <NoteForAdmin /> : <NoteForVisitor />}
				</>
			) : status === statusTypes.loading ? (
				<p>Loading...</p>
			) : (
				<p>
					Wystąpił błąd przy wyświetleniu notatki. Sprawdź połączenie z
					internetem lub odśwież stronę.
				</p>
			)}
		</>
	);
}
